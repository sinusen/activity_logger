{"version":3,"sources":["components/Dropdown.js","helpers/time-functions.js","components/ActivityForm.js","helpers/list-handlers.js","components/TableDisplay.js","components/ActivityDisplay.js","App.js","index.js"],"names":["Dropdown","label","selected","options","onSelectedChange","generatedList","length","map","option","value","onChange","className","aria-label","getHyphenatedDate","date","Date","now","d","Number","month","getMonth","day","getDate","year","getFullYear","join","getSlashedDate","getFormattedTime","minutes","getMinutes","hours","getHours","Form","props","areas","machines","operators","setDefaultStates","stateDefinition","state","maintenanceActivity","selectedDate","selectedTime","setState","updateMachines","area","selectedArea","machinesList","filter","item","machine_location","id","machine_name","selectedMachine","updateAreas","Set","forEach","value1","value2","set","push","getAreasFromList","handleAreaChange","event","stateProperty","target","handleChange","handleFormSubmission","dateValue","timeValue","preventDefault","onFormSubmit","epochMilliSeconds","getTime","machineId","operatorId","selectedOperator","activity","this","onFormMount","prevProps","operatorsList","name","console","log","postSuccessCount","onSubmit","htmlFor","type","placeholder","style","height","required","React","Component","TableDisplay","activityData","scope","row","index","epoch_ms","machine_operator","ActivityDisplay","App","formDataError","tableDataError","fetchOperationData","endPoint","a","axios","get","response","error","data","serverError","fetchDropdownData","areaAndMachines","postFormData","post","alert","message","ActivityForm","activityLog","renderForm","renderTable","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.cde285a0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Dropdown = ({ label, selected, options, onSelectedChange }) => {\r\n  const generatedList =\r\n    options.length > 0\r\n      ? options.map((option) => {\r\n          return (\r\n            <option key={option.value} value={option.value}>\r\n              {option.label}\r\n            </option>\r\n          );\r\n        })\r\n      : null;\r\n\r\n  return (\r\n    <div>\r\n      <label>{label}</label>\r\n      <select\r\n        value={selected}\r\n        onChange={onSelectedChange}\r\n        className=\"form-select\"\r\n        aria-label=\"Default select example\"\r\n      >\r\n        {generatedList}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n","//Function to generate hyphen formatted date\r\nfunction getHyphenatedDate(date = Date.now()) {\r\n  const d = new Date(Number(date));\r\n  let month = \"\" + (d.getMonth() + 1);\r\n  let day = \"\" + d.getDate();\r\n  let year = d.getFullYear();\r\n\r\n  if (month.length < 2) month = \"0\" + month;\r\n  if (day.length < 2) day = \"0\" + day;\r\n  return [year, month, day].join(\"-\");\r\n}\r\n\r\n//Function to generate slash formatted date\r\nfunction getSlashedDate(date = Date.now()) {\r\n  const d = new Date(Number(date));\r\n  let month = \"\" + (d.getMonth() + 1);\r\n  let day = \"\" + d.getDate();\r\n  let year = d.getFullYear();\r\n\r\n  if (month.length < 2) month = \"0\" + month;\r\n  if (day.length < 2) day = \"0\" + day;\r\n  return [day, month, year].join(\"/\");\r\n}\r\n//Function to generate formatted time\r\nfunction getFormattedTime(date = Date.now()) {\r\n  const d = new Date(date);\r\n  let minutes = \"\" + d.getMinutes();\r\n  let hours = \"\" + d.getHours();\r\n\r\n  if (minutes.length < 2) minutes = \"0\" + minutes;\r\n  if (hours.length < 2) hours = \"0\" + hours;\r\n  return [hours, minutes].join(\":\");\r\n}\r\n\r\n//Funtion to get epoch in milliseconds from date time\r\nfunction getEpoch(dateValue, timeValue) {\r\n  const dateTime = new Date(`${dateValue} ${timeValue}`);\r\n  return dateTime.getTime();\r\n}\r\n\r\nexport { getFormattedTime, getHyphenatedDate, getEpoch, getSlashedDate };\r\n","import React from \"react\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport {\r\n  getFormattedTime,\r\n  getHyphenatedDate,\r\n  getEpoch,\r\n} from \"../helpers/time-functions\";\r\nimport {\r\n  getAreasFromList,\r\n  getMachinesFromList,\r\n  getOperatorsFromList,\r\n} from \"../helpers/list-handlers\";\r\n\r\nclass Form extends React.Component {\r\n  areas = [];\r\n  machines = [];\r\n  operators = [];\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      maintenanceActivity: \"\",\r\n      selectedArea: \"\",\r\n      selectedMachine: \"\",\r\n      selectedDate: getHyphenatedDate(),\r\n      selectedTime: getFormattedTime(),\r\n      selectedOperator: \"\",\r\n    };\r\n  }\r\n\r\n  setDefaultStates = () => {\r\n    const stateDefinition = {\r\n      ...this.state,\r\n      maintenanceActivity: \"\",\r\n      selectedDate: getHyphenatedDate(),\r\n      selectedTime: getFormattedTime(),\r\n    };\r\n    this.setState(stateDefinition);\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await this.props.onFormMount();\r\n  }\r\n  updateMachines = () => {\r\n    this.machines = getMachinesFromList(\r\n      this.state.selectedArea,\r\n      this.props.machinesList\r\n    );\r\n    this.setState({ selectedMachine: this.machines[0].value });\r\n  };\r\n\r\n  updateAreas = () => {\r\n    this.areas = getAreasFromList(this.props.machinesList);\r\n    this.setState({ selectedArea: this.areas[0].value }, () => {\r\n      this.updateMachines();\r\n    });\r\n  };\r\n  componentDidUpdate(prevProps) {\r\n    if (\r\n      this.props.machinesList !== prevProps.machinesList &&\r\n      this.props.machinesList\r\n    ) {\r\n      this.updateAreas();\r\n    }\r\n    if (\r\n      this.props.operatorsList !== prevProps.operatorsList &&\r\n      this.props.operatorsList\r\n    ) {\r\n      this.operators = getOperatorsFromList(this.props.operatorsList);\r\n      this.setState({ selectedOperator: this.operators[0].value });\r\n      console.log(this.operators);\r\n    }\r\n    if (this.props.postSuccessCount !== prevProps.postSuccessCount) {\r\n      this.setDefaultStates();\r\n    }\r\n  }\r\n\r\n  handleAreaChange = (event, stateProperty) => {\r\n    this.setState({ [stateProperty]: event.target.value }, () => {\r\n      this.updateMachines();\r\n    });\r\n  };\r\n  handleChange = (event, stateProperty) => {\r\n    this.setState({ [stateProperty]: event.target.value });\r\n  };\r\n\r\n  handleFormSubmission = (event) => {\r\n    event.preventDefault();\r\n    this.props.onFormSubmit({\r\n      epochMilliSeconds: getEpoch(\r\n        this.state.selectedDate,\r\n        this.state.selectedTime\r\n      ),\r\n      machineId: Number(this.state.selectedMachine),\r\n      operatorId: Number(this.state.selectedOperator),\r\n      activity: this.state.maintenanceActivity,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleFormSubmission}>\r\n        <div className=\"row g-5\">\r\n          <div className=\"col-md-6\">\r\n            <Dropdown\r\n              label=\"Area\"\r\n              selected={this.state.selectedArea}\r\n              options={this.areas}\r\n              onSelectedChange={(event) => {\r\n                this.handleAreaChange(event, \"selectedArea\");\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <Dropdown\r\n              label=\"Machine\"\r\n              selected={this.state.selectedMachine}\r\n              options={this.machines}\r\n              onSelectedChange={(event) => {\r\n                this.handleChange(event, \"selectedMachine\");\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <label htmlFor=\"datePicker\" className=\"form-label\">\r\n              Date\r\n            </label>\r\n            <input\r\n              className=\"form-control\"\r\n              id=\"datePicker\"\r\n              type=\"date\"\r\n              value={this.state.selectedDate}\r\n              onChange={(event) => {\r\n                this.handleChange(event, \"selectedDate\");\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <label htmlFor=\"timePicker\" className=\"form-label\">\r\n              Time\r\n            </label>\r\n            <input\r\n              className=\"form-control\"\r\n              id=\"timePicker\"\r\n              type=\"time\"\r\n              value={this.state.selectedTime}\r\n              onChange={(event) => {\r\n                this.handleChange(event, \"selectedTime\");\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12\">\r\n            <Dropdown\r\n              label=\"Operator/Technician\"\r\n              selected={this.state.selectedOperator}\r\n              options={this.operators}\r\n              onSelectedChange={(event) => {\r\n                this.handleChange(event, \"selectedOperator\");\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <label htmlFor=\"maintenanceActivities\" className=\"form-label\">\r\n              Maintenance Activities\r\n            </label>\r\n            <textarea\r\n              id=\"maintenanceActivities\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter activity\"\r\n              style={{ height: \"200px\" }}\r\n              value={this.state.maintenanceActivity}\r\n              onChange={(event) => {\r\n                this.handleChange(event, \"maintenanceActivity\");\r\n              }}\r\n              required\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","const getAreasFromList = (machinesList) => {\r\n  let areas = [];\r\n  [...new Set(machinesList.map((item) => item.machine_location))].forEach(\r\n    (value1, value2, set) => {\r\n      areas.push({ label: value1, value: value1 });\r\n    }\r\n  );\r\n  return areas;\r\n};\r\n\r\nconst getMachinesFromList = (area, machinesList) => {\r\n  const machines = machinesList\r\n    .filter((item) => item.machine_location === area)\r\n    .map(({ id, machine_name }) => {\r\n      return { label: machine_name, value: id };\r\n    });\r\n  return machines;\r\n};\r\n\r\nconst getOperatorsFromList = (operatorsList) => {\r\n  const operators = operatorsList.map(({ id, name }) => {\r\n    return { label: name, value: id };\r\n  });\r\n  return operators;\r\n};\r\n\r\nexport { getAreasFromList, getMachinesFromList, getOperatorsFromList };\r\n","import React from \"react\";\r\nimport { getSlashedDate, getFormattedTime } from \"../helpers/time-functions\";\r\n\r\nconst TableDisplay = ({ activityData }) => {\r\n  const renderTableRows = () => {\r\n    if (activityData.length <= 0) {\r\n      return null;\r\n    }\r\n    return activityData.map((row, index) => {\r\n      return (\r\n        <tr key={index}>\r\n          <th scope=\"row\">{index + 1}</th>\r\n          <td>{getSlashedDate(Number(row.epoch_ms))}</td>\r\n          <td>{getFormattedTime(Number(row.epoch_ms))}</td>\r\n          <td>{row.machine_name}</td>\r\n          <td>{row.machine_operator}</td>\r\n          <td>{row.activity}</td>\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Sl No</th>\r\n            <th scope=\"col\">Date</th>\r\n            <th scope=\"col\">Time</th>\r\n            <th scope=\"col\">Machine</th>\r\n            <th scope=\"col\">Operator</th>\r\n            <th scope=\"col\">Activity</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{renderTableRows()}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TableDisplay;\r\n","import React from \"react\";\r\nimport TableDisplay from \"./TableDisplay\";\r\n\r\nconst ActivityDisplay = ({ activityData }) => {\r\n  return (\r\n    <div>\r\n      <TableDisplay activityData={activityData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActivityDisplay;\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport ActivityForm from \"./components/ActivityForm\";\r\nimport ActivityDisplay from \"./components/ActivityDisplay\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    formDataError: false,\r\n    tableDataError: false,\r\n    activityData: [],\r\n    postSuccessCount: 0,\r\n    machinesList: null,\r\n    operatorsList: null,\r\n  };\r\n  fetchOperationData = async (endPoint) => {\r\n    try {\r\n      const response = await axios.get(`/activity-log/${endPoint}`);\r\n      return {\r\n        error: response.data.serverError,\r\n        data: response.data.data,\r\n      };\r\n    } catch (err) {\r\n      return { error: true };\r\n    }\r\n  };\r\n\r\n  fetchDropdownData = async () => {\r\n    const areaAndMachines = await this.fetchOperationData(\"area-and-machines\");\r\n    const operators = await this.fetchOperationData(\"operators\");\r\n\r\n    if (areaAndMachines.error || operators.error) {\r\n      this.setState({ formDataError: true });\r\n      return;\r\n    }\r\n    this.setState({ machinesList: areaAndMachines.data });\r\n    this.setState({ operatorsList: operators.data });\r\n  };\r\n\r\n  postFormData = async (data) => {\r\n    try {\r\n      const response = await axios.post(`/activity-log/submit-form-data`, data);\r\n      alert(response.data.message);\r\n      if (!response.data.error) {\r\n        this.setState({ postSuccessCount: this.state.postSuccessCount + 1 });\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      alert(\"Form submit error\");\r\n    }\r\n  };\r\n  renderForm() {\r\n    if (this.state.formDataError) {\r\n      return \"Error loading data\";\r\n    }\r\n    return (\r\n      <div className=\"activity-form\">\r\n        <ActivityForm\r\n          onFormMount={this.fetchDropdownData}\r\n          machinesList={this.state.machinesList}\r\n          operatorsList={this.state.operatorsList}\r\n          onFormSubmit={this.postFormData}\r\n          postSuccessCount={this.state.postSuccessCount}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  renderTable() {\r\n    if (this.state.tableDataError) {\r\n      return \"Error loading data\";\r\n    }\r\n    return (\r\n      <div>\r\n        <ActivityDisplay activityData={this.state.activityData} />\r\n      </div>\r\n    );\r\n  }\r\n  async componentDidMount() {\r\n    const activityLog = await this.fetchOperationData(\"activity-logs\");\r\n    if (activityLog.error) {\r\n      this.setState({ tableDataError: activityLog.error });\r\n      return;\r\n    }\r\n    this.setState({ activityData: activityLog.data });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"text-center main-title\">Activity Logger</h1>\r\n        {this.renderForm()}\r\n        {this.renderTable()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}