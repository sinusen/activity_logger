{"version":3,"sources":["components/Dropdown.js","helpers/timeFunctions.js","components/Form.js","App.js","index.js"],"names":["Dropdown","label","selected","options","onSelectedChange","generatedList","length","map","option","value","onChange","className","aria-label","getFormattedDate","date","Date","now","d","month","getMonth","day","getDate","year","getFullYear","join","getFormattedTime","minutes","getMinutes","hours","getHours","Form","props","areas","machines","loggers","getAreasFromList","machinesList","Set","item","machine_location","forEach","value1","value2","set","push","setState","currentArea","getMachinesFromList","area","filter","machine_name","currentMachine","handleAreaChange","event","stateProperty","target","handleChange","state","maintenanceActivity","selectedDate","selectedTime","currentLogger","this","onFormMount","timeStep","prevProps","htmlFor","id","type","placeholder","style","height","React","Component","App","error","fetchAreaAndMachines","a","axios","get","response","data","serverError","renderForm","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.a0aa68e8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Dropdown = ({ label, selected, options, onSelectedChange }) => {\r\n  const generatedList =\r\n    options.length > 0\r\n      ? options.map((option) => {\r\n          return (\r\n            <option key={option.value} value={option.value}>\r\n              {option.label}\r\n            </option>\r\n          );\r\n        })\r\n      : null;\r\n\r\n  return (\r\n    <div>\r\n      <label>{label}</label>\r\n      <select\r\n        value={selected.value}\r\n        onChange={onSelectedChange}\r\n        className=\"form-select\"\r\n        aria-label=\"Default select example\"\r\n      >\r\n        {generatedList}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n","//Function to generate formatted date for input\r\nfunction getFormattedDate(date = Date.now()) {\r\n  const d = new Date(date);\r\n  let month = \"\" + (d.getMonth() + 1);\r\n  let day = \"\" + d.getDate();\r\n  let year = d.getFullYear();\r\n\r\n  if (month.length < 2) month = \"0\" + month;\r\n  if (day.length < 2) day = \"0\" + day;\r\n  return [year, month, day].join(\"-\");\r\n}\r\n//Function to generate formatted time for input\r\nfunction getFormattedTime(date = Date.now()) {\r\n  const d = new Date(date);\r\n  let minutes = \"\" + d.getMinutes();\r\n  let hours = \"\" + d.getHours();\r\n\r\n  if (minutes.length < 2) minutes = \"0\" + minutes;\r\n  if (hours.length < 2) hours = \"0\" + hours;\r\n  return [hours, minutes].join(\":\");\r\n}\r\n\r\nexport { getFormattedTime, getFormattedDate };\r\n","import React from \"react\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport { getFormattedTime, getFormattedDate } from \"../helpers/timeFunctions\";\r\n\r\nclass Form extends React.Component {\r\n  areas = [];\r\n  machines = [];\r\n  loggers = [\r\n    { label: \"Sinu Sen\", value: \"SS\" },\r\n    { label: \"Libi Varghese\", value: \"LV\" },\r\n  ];\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      maintenanceActivity: \"\",\r\n      currentArea: \"\",\r\n      currentMachine: \"\",\r\n      selectedDate: getFormattedDate(),\r\n      selectedTime: getFormattedTime(),\r\n      currentLogger: \"\",\r\n    };\r\n  }\r\n\r\n  getAreasFromList = () => {\r\n    if (!this.props.machinesList) {\r\n      this.areas = [];\r\n      return;\r\n    }\r\n    let areas = [];\r\n    [\r\n      ...new Set(this.props.machinesList.map((item) => item.machine_location)),\r\n    ].forEach((value1, value2, set) => {\r\n      areas.push({ label: value1, value: value1 });\r\n    });\r\n    this.areas = areas;\r\n    this.setState({ currentArea: this.areas[0] });\r\n  };\r\n\r\n  getMachinesFromList = (area) => {\r\n    if (!this.props.machinesList) {\r\n      this.machines = [];\r\n      return;\r\n    }\r\n    this.machines = this.props.machinesList\r\n      .filter((item) => item.machine_location == area)\r\n      .map(({ machine_name }) => {\r\n        return { label: machine_name, value: machine_name };\r\n      });\r\n    this.setState({ currentMachine: this.machines[0] });\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await this.props.onFormMount();\r\n    this.setState({ timeStep: \"900\" });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (\r\n      this.props.machinesList != prevProps.machinesList &&\r\n      this.props.machinesList\r\n    ) {\r\n      this.getAreasFromList();\r\n      this.getMachinesFromList(this.areas[0].value);\r\n    }\r\n  }\r\n\r\n  handleAreaChange = (event, stateProperty) => {\r\n    this.setState({ [stateProperty]: event.target.value });\r\n    this.getMachinesFromList(event.target.value);\r\n  };\r\n  handleChange = (event, stateProperty) => {\r\n    this.setState({ [stateProperty]: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form>\r\n        <div className=\"row g-5\">\r\n          <div className=\"col-md-6\">\r\n            <Dropdown\r\n              label=\"Select an area\"\r\n              selected={this.state.currentArea}\r\n              options={this.areas}\r\n              onSelectedChange={(event) => {\r\n                this.handleAreaChange(event, \"currentArea\");\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <Dropdown\r\n              label=\"Select a machine\"\r\n              selected={this.state.currentMachine}\r\n              options={this.machines}\r\n              onSelectedChange={(event) => {\r\n                this.handleChange(event, \"currentMachine\");\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <label htmlFor=\"datePicker\" className=\"form-label\">\r\n              Select the date\r\n            </label>\r\n            <input\r\n              className=\"form-control\"\r\n              id=\"datePicker\"\r\n              type=\"date\"\r\n              value={this.state.selectedDate}\r\n              onChange={(event) => {\r\n                this.handleChange(event, \"selectedDate\");\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <label htmlFor=\"timePicker\" className=\"form-label\">\r\n              Select the time\r\n            </label>\r\n            <input\r\n              className=\"form-control\"\r\n              id=\"timePicker\"\r\n              type=\"time\"\r\n              value={this.state.selectedTime}\r\n              onChange={(event) => {\r\n                this.handleChange(event, \"selectedTime\");\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12\">\r\n            <Dropdown\r\n              label=\"Please input the initials\"\r\n              selected={this.state.currentLogger}\r\n              options={this.loggers}\r\n              onSelectedChange={(event) => {\r\n                this.handleChange(event, \"currentLogger\");\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <label htmlFor=\"maintenanceActivities\" className=\"form-label\">\r\n              Maintenance Activities\r\n            </label>\r\n            <textarea\r\n              id=\"maintenanceActivities\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter activity\"\r\n              style={{ height: \"200px\" }}\r\n              value={this.state.maintenanceActivity}\r\n              onChange={(event) => {\r\n                this.handleChange(event, \"maintenanceActivity\");\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Form from \"./components/Form\";\r\n\r\nclass App extends React.Component {\r\n  state = { error: false, machinesList: null };\r\n  fetchAreaAndMachines = async () => {\r\n    try {\r\n      const response = await axios.get(\"/activity-log/area-and-machines\");\r\n      this.setState({\r\n        error: response.data.serverError,\r\n        machinesList: response.data.data,\r\n      });\r\n    } catch (err) {\r\n      this.setState({ error: true });\r\n    }\r\n  };\r\n\r\n  renderForm() {\r\n    if (this.state.error) {\r\n      return \"Error\";\r\n    }\r\n    return (\r\n      <Form\r\n        onFormMount={this.fetchAreaAndMachines}\r\n        machinesList={this.state.machinesList}\r\n      />\r\n    );\r\n  }\r\n  render() {\r\n    return <div className=\"container\">{this.renderForm()}</div>;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}