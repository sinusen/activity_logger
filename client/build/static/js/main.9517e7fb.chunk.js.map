{"version":3,"sources":["components/Dropdown.js","helpers/time-functions.js","components/ActivityForm.js","helpers/list-handlers.js","components/TableDisplay.js","components/ActivityDisplay.js","components/NavigationBar.js","App.js","index.js"],"names":["Dropdown","label","selected","options","onSelectedChange","labelClass","generatedList","length","map","option","value","Fragment","className","onChange","aria-label","getHyphenatedDate","date","Date","now","d","Number","month","getMonth","day","getDate","year","getFullYear","join","getSlashedDate","getFormattedTime","minutes","getMinutes","hours","getHours","addYearstoCurrentDate","years","expiryDate","setFullYear","Form","props","machineNames","machineGroups","machineLocations","operators","setDefaultStates","stateDefinition","state","maintenanceActivity","selectedDate","selectedTime","setState","updateMachines","location","group","selectedMachineLocation","selectedMachineGroup","machinesList","filter","item","machine_location","machine_group","id","machine_name","selectedMachine","updateMachineGroups","Set","forEach","value1","value2","set","push","getMachineGroupsFromList","updateMachineLocations","areas","getMachineLocationsFromList","handleAreaChange","event","stateProperty","target","handleGroupChange","handleChange","handleFormSubmission","dateValue","timeValue","preventDefault","onFormSubmit","epochMilliSeconds","getTime","machineId","operatorId","selectedOperator","activity","this","onFormMount","prevProps","operatorsList","name","loggedOperator","postSuccessCount","onSubmit","htmlFor","type","placeholder","style","height","required","React","Component","TableDisplay","activityData","scope","row","index","epoch_ms","initials","colSpan","ActivityDisplay","NavigationBar","to","class","App","fetchOperationData","endPoint","a","axios","get","response","error","data","serverError","fetchDropdownData","machinesData","formDataError","postFormData","post","cookies","expires","alert","message","console","log","tableDataError","activityLog","exact","path","renderForm","renderTable","withCookies","ReactDOM","render","CookiesProvider","document","querySelector"],"mappings":"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","file":"static/js/main.9517e7fb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Dropdown = ({\r\n  label,\r\n  selected,\r\n  options,\r\n  onSelectedChange,\r\n  labelClass = \"\",\r\n}) => {\r\n  const generatedList =\r\n    options.length > 0\r\n      ? options.map((option) => {\r\n          return (\r\n            <option key={option.value} value={option.value}>\r\n              {option.label}\r\n            </option>\r\n          );\r\n        })\r\n      : null;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <label className={labelClass}>{label}</label>\r\n      <select\r\n        value={selected}\r\n        onChange={onSelectedChange}\r\n        className=\"form-select\"\r\n        aria-label=\"Default select example\"\r\n      >\r\n        {generatedList}\r\n      </select>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n","//Function to generate hyphen formatted date\r\nfunction getHyphenatedDate(date = Date.now()) {\r\n  const d = new Date(Number(date));\r\n  let month = \"\" + (d.getMonth() + 1);\r\n  let day = \"\" + d.getDate();\r\n  let year = d.getFullYear();\r\n\r\n  if (month.length < 2) month = \"0\" + month;\r\n  if (day.length < 2) day = \"0\" + day;\r\n  return [year, month, day].join(\"-\");\r\n}\r\n\r\n//Function to generate slash formatted date\r\nfunction getSlashedDate(date = Date.now()) {\r\n  const d = new Date(Number(date));\r\n  let month = \"\" + (d.getMonth() + 1);\r\n  let day = \"\" + d.getDate();\r\n  let year = d.getFullYear();\r\n\r\n  if (month.length < 2) month = \"0\" + month;\r\n  if (day.length < 2) day = \"0\" + day;\r\n  return [day, month, year].join(\"/\");\r\n}\r\n//Function to generate formatted time\r\nfunction getFormattedTime(date = Date.now()) {\r\n  const d = new Date(date);\r\n  let minutes = \"\" + d.getMinutes();\r\n  let hours = \"\" + d.getHours();\r\n\r\n  if (minutes.length < 2) minutes = \"0\" + minutes;\r\n  if (hours.length < 2) hours = \"0\" + hours;\r\n  return [hours, minutes].join(\":\");\r\n}\r\n\r\n//Funtion to get epoch in milliseconds from date time\r\nfunction getEpoch(dateValue, timeValue) {\r\n  const dateTime = new Date(`${dateValue}T${timeValue}`);\r\n  return dateTime.getTime();\r\n}\r\n\r\nfunction addYearstoCurrentDate(years = 0) {\r\n  let expiryDate = new Date();\r\n  expiryDate.setFullYear(expiryDate.getFullYear() + years);\r\n  return new Date(expiryDate);\r\n}\r\n\r\nexport {\r\n  getFormattedTime,\r\n  getHyphenatedDate,\r\n  getEpoch,\r\n  getSlashedDate,\r\n  addYearstoCurrentDate,\r\n};\r\n","import \"./ActivityForm.css\";\r\n\r\nimport React from \"react\";\r\n\r\nimport Dropdown from \"./Dropdown\";\r\nimport {\r\n  getFormattedTime,\r\n  getHyphenatedDate,\r\n  getEpoch,\r\n} from \"../helpers/time-functions\";\r\nimport {\r\n  getMachineLocationsFromList,\r\n  getMachineGroupsFromList,\r\n  getMachinesFromList,\r\n  getOperatorsFromList,\r\n} from \"../helpers/list-handlers\";\r\n\r\nclass Form extends React.Component {\r\n  machineNames = [];\r\n  machineGroups = [];\r\n  machineLocations = [];\r\n  operators = [];\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      maintenanceActivity: \"\",\r\n      selectedMachine: \"\",\r\n      selectedMachineGroup: \"\",\r\n      selectedMachineLocation: \"\",\r\n      selectedDate: getHyphenatedDate(),\r\n      selectedTime: getFormattedTime(),\r\n      selectedOperator: \"\",\r\n    };\r\n  }\r\n\r\n  setDefaultStates = () => {\r\n    const stateDefinition = {\r\n      ...this.state,\r\n      maintenanceActivity: \"\",\r\n      selectedDate: getHyphenatedDate(),\r\n      selectedTime: getFormattedTime(),\r\n    };\r\n    this.setState(stateDefinition);\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await this.props.onFormMount();\r\n  }\r\n  updateMachines = () => {\r\n    this.machineNames = getMachinesFromList(\r\n      this.state.selectedMachineLocation,\r\n      this.state.selectedMachineGroup,\r\n      this.props.machinesList\r\n    );\r\n    this.setState({ selectedMachine: this.machineNames[0].value });\r\n  };\r\n\r\n  updateMachineGroups = () => {\r\n    this.machineGroups = getMachineGroupsFromList(\r\n      this.state.selectedMachineLocation,\r\n      this.props.machinesList\r\n    );\r\n    this.setState({ selectedMachineGroup: this.machineGroups[0].value }, () => {\r\n      this.updateMachines();\r\n    });\r\n  };\r\n\r\n  updateMachineLocations = () => {\r\n    this.machineLocations = getMachineLocationsFromList(\r\n      this.props.machinesList\r\n    );\r\n    this.setState(\r\n      { selectedMachineLocation: this.machineLocations[0].value },\r\n      () => {\r\n        this.updateMachineGroups();\r\n      }\r\n    );\r\n  };\r\n  componentDidUpdate(prevProps) {\r\n    if (\r\n      this.props.machinesList !== prevProps.machinesList &&\r\n      this.props.machinesList\r\n    ) {\r\n      this.updateMachineLocations();\r\n    }\r\n    if (\r\n      this.props.operatorsList !== prevProps.operatorsList &&\r\n      this.props.operatorsList\r\n    ) {\r\n      this.operators = getOperatorsFromList(this.props.operatorsList);\r\n      this.setState({\r\n        selectedOperator: this.props.loggedOperator || this.operators[0].value,\r\n      });\r\n    }\r\n    if (this.props.postSuccessCount !== prevProps.postSuccessCount) {\r\n      this.setDefaultStates();\r\n    }\r\n  }\r\n\r\n  handleAreaChange = (event, stateProperty) => {\r\n    this.setState({ [stateProperty]: event.target.value }, () => {\r\n      this.updateMachineGroups();\r\n    });\r\n  };\r\n  handleGroupChange = (event, stateProperty) => {\r\n    this.setState({ [stateProperty]: event.target.value }, () => {\r\n      this.updateMachines();\r\n    });\r\n  };\r\n  handleChange = (event, stateProperty) => {\r\n    this.setState({ [stateProperty]: event.target.value });\r\n  };\r\n\r\n  handleFormSubmission = (event) => {\r\n    event.preventDefault();\r\n    this.props.onFormSubmit({\r\n      epochMilliSeconds: getEpoch(\r\n        this.state.selectedDate,\r\n        this.state.selectedTime\r\n      ),\r\n      machineId: Number(this.state.selectedMachine),\r\n      operatorId: Number(this.state.selectedOperator),\r\n      activity: this.state.maintenanceActivity,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleFormSubmission}>\r\n        <div className=\"row g-4\">\r\n          <div className=\"col-md-4\">\r\n            <div className=\"input-group\">\r\n              <Dropdown\r\n                label=\"Area\"\r\n                labelClass=\"input-group-text fw-bold\"\r\n                selected={this.state.selectedMachineLocation}\r\n                options={this.machineLocations}\r\n                onSelectedChange={(event) => {\r\n                  this.handleAreaChange(event, \"selectedMachineLocation\");\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <div className=\"input-group\">\r\n              <Dropdown\r\n                label=\"Group\"\r\n                labelClass=\"input-group-text fw-bold\"\r\n                selected={this.state.selectedMachineGroup}\r\n                options={this.machineGroups}\r\n                onSelectedChange={(event) => {\r\n                  this.handleGroupChange(event, \"selectedMachineGroup\");\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <div className=\"input-group\">\r\n              <Dropdown\r\n                label=\"Machine\"\r\n                labelClass=\"input-group-text fw-bold\"\r\n                selected={this.state.selectedMachine}\r\n                options={this.machineNames}\r\n                onSelectedChange={(event) => {\r\n                  this.handleChange(event, \"selectedMachine\");\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <div className=\"input-group\">\r\n              <label htmlFor=\"datePicker\" className=\"input-group-text fw-bold\">\r\n                Date\r\n              </label>\r\n              <input\r\n                className=\"form-control\"\r\n                id=\"datePicker\"\r\n                type=\"date\"\r\n                value={this.state.selectedDate}\r\n                onChange={(event) => {\r\n                  this.handleChange(event, \"selectedDate\");\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <div className=\"input-group\">\r\n              <label htmlFor=\"timePicker\" className=\"input-group-text fw-bold\">\r\n                Time\r\n              </label>\r\n              <input\r\n                className=\"form-control\"\r\n                id=\"timePicker\"\r\n                type=\"time\"\r\n                value={this.state.selectedTime}\r\n                onChange={(event) => {\r\n                  this.handleChange(event, \"selectedTime\");\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-12\">\r\n            <div className=\"input-group\">\r\n              <Dropdown\r\n                label=\"Operator/Technician\"\r\n                labelClass=\"input-group-text fw-bold\"\r\n                selected={this.state.selectedOperator}\r\n                options={this.operators}\r\n                onSelectedChange={(event) => {\r\n                  this.handleChange(event, \"selectedOperator\");\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <label\r\n              htmlFor=\"maintenanceActivities\"\r\n              className=\"form-label fw-bold\"\r\n            >\r\n              Maintenance Activities\r\n            </label>\r\n            <textarea\r\n              id=\"maintenanceActivities\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter activity\"\r\n              style={{ height: \"200px\" }}\r\n              value={this.state.maintenanceActivity}\r\n              onChange={(event) => {\r\n                this.handleChange(event, \"maintenanceActivity\");\r\n              }}\r\n              required\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","const getMachineLocationsFromList = (machinesList) => {\r\n  let areas = [];\r\n  [...new Set(machinesList.map((item) => item.machine_location))].forEach(\r\n    (value1, value2, set) => {\r\n      areas.push({ label: value1, value: value1 });\r\n    }\r\n  );\r\n  return areas;\r\n};\r\n\r\nconst getMachineGroupsFromList = (location, machinesList) => {\r\n  const machineGroups = [];\r\n  [\r\n    ...new Set(\r\n      machinesList\r\n        .filter((item) => item.machine_location === location)\r\n        .map((item) => item.machine_group)\r\n    ),\r\n  ].forEach((value1, value2, set) => {\r\n    machineGroups.push({ label: value1, value: value1 });\r\n  });\r\n  return machineGroups;\r\n};\r\n\r\nconst getMachinesFromList = (location, group, machinesList) => {\r\n  const machines = machinesList\r\n    .filter(\r\n      (item) =>\r\n        item.machine_location === location && item.machine_group === group\r\n    )\r\n    .map(({ id, machine_name }) => {\r\n      return { label: machine_name, value: id };\r\n    });\r\n  return machines;\r\n};\r\n\r\nconst getOperatorsFromList = (operatorsList) => {\r\n  const operators = operatorsList.map(({ id, name }) => {\r\n    return { label: name, value: id };\r\n  });\r\n  return operators;\r\n};\r\n\r\nexport {\r\n  getMachineLocationsFromList,\r\n  getMachineGroupsFromList,\r\n  getMachinesFromList,\r\n  getOperatorsFromList,\r\n};\r\n","import React from \"react\";\r\nimport { getSlashedDate, getFormattedTime } from \"../helpers/time-functions\";\r\n\r\nconst TableDisplay = ({ activityData }) => {\r\n  const renderTableRows = () => {\r\n    if (activityData.length <= 0) {\r\n      return null;\r\n    }\r\n    return activityData.map((row, index) => {\r\n      return (\r\n        <React.Fragment key={index}>\r\n          <tr>\r\n            <th scope=\"row\">{index + 1}</th>\r\n            <td>{getSlashedDate(Number(row.epoch_ms))}</td>\r\n            <td>{getFormattedTime(Number(row.epoch_ms))}</td>\r\n            <td>{row.machine_name}</td>\r\n            <td>{row.initials}</td>\r\n          </tr>\r\n          <tr>\r\n            <td colSpan=\"5\">{row.activity}</td>\r\n          </tr>\r\n        </React.Fragment>\r\n      );\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Sl No</th>\r\n            <th scope=\"col\">Date</th>\r\n            <th scope=\"col\">Time</th>\r\n            <th scope=\"col\">Machine</th>\r\n            <th scope=\"col\">Operator</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{renderTableRows()}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TableDisplay;\r\n","import React from \"react\";\r\nimport TableDisplay from \"./TableDisplay\";\r\n\r\nconst ActivityDisplay = ({ activityData }) => {\r\n  return (\r\n    <div>\r\n      <TableDisplay activityData={activityData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActivityDisplay;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst NavigationBar = () => {\r\n  return (\r\n    <div>\r\n      <ul className=\"nav nav-tabs\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/\">\r\n            Submit activity\r\n          </Link>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/activitydisplay\">\r\n            Display activity\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport { instanceOf } from \"prop-types\";\r\nimport { withCookies, Cookies } from \"react-cookie\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nimport ActivityForm from \"./components/ActivityForm\";\r\nimport ActivityDisplay from \"./components/ActivityDisplay\";\r\nimport NavigationBar from \"./components/NavigationBar\";\r\n\r\nimport { addYearstoCurrentDate } from \"./helpers/time-functions\";\r\n\r\nclass App extends React.Component {\r\n  static propTypes = {\r\n    cookies: instanceOf(Cookies).isRequired,\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    const { cookies } = props;\r\n    this.state = {\r\n      name: (cookies && cookies.get(\"name\")) || \"Ben\",\r\n      formDataError: false,\r\n      tableDataError: false,\r\n      activityData: [],\r\n      postSuccessCount: 0,\r\n      machinesList: null,\r\n      operatorsList: null,\r\n    };\r\n  }\r\n\r\n  fetchOperationData = async (endPoint) => {\r\n    try {\r\n      const response = await axios.get(`/activity-log/${endPoint}`);\r\n      return {\r\n        error: response.data.serverError,\r\n        data: response.data.data,\r\n      };\r\n    } catch (err) {\r\n      return { error: true };\r\n    }\r\n  };\r\n\r\n  fetchDropdownData = async () => {\r\n    const machinesData = await this.fetchOperationData(\"machines_groups_areas\");\r\n    const operators = await this.fetchOperationData(\"operators\");\r\n\r\n    if (machinesData.error || operators.error) {\r\n      this.setState({ formDataError: true });\r\n      return;\r\n    }\r\n    this.setState({ machinesList: machinesData.data });\r\n    this.setState({ operatorsList: operators.data });\r\n  };\r\n\r\n  postFormData = async (data) => {\r\n    try {\r\n      const response = await axios.post(`/activity-log/submit-form-data`, data);\r\n\r\n      const { cookies } = this.props;\r\n      cookies.set(\"logger\", data.operatorId, {\r\n        expires: addYearstoCurrentDate(1),\r\n      });\r\n\r\n      alert(response.data.message);\r\n      if (!response.data.error) {\r\n        this.setState({ postSuccessCount: this.state.postSuccessCount + 1 });\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      alert(\"Form submit error\");\r\n    }\r\n  };\r\n  renderForm() {\r\n    if (this.state.formDataError) {\r\n      return \"Error loading data\";\r\n    }\r\n    return (\r\n      <div className=\"mt-3\">\r\n        <ActivityForm\r\n          onFormMount={this.fetchDropdownData}\r\n          machinesList={this.state.machinesList}\r\n          operatorsList={this.state.operatorsList}\r\n          onFormSubmit={this.postFormData}\r\n          postSuccessCount={this.state.postSuccessCount}\r\n          loggedOperator={this.props.cookies.get(\"logger\") || null}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  renderTable() {\r\n    if (this.state.tableDataError) {\r\n      return \"Error loading data\";\r\n    }\r\n    return (\r\n      <div className=\"mt-3\">\r\n        <ActivityDisplay activityData={this.state.activityData} />\r\n      </div>\r\n    );\r\n  }\r\n  async componentDidMount() {\r\n    const activityLog = await this.fetchOperationData(\"activity-logs\");\r\n    if (activityLog.error) {\r\n      this.setState({ tableDataError: activityLog.error });\r\n      return;\r\n    }\r\n    this.setState({ activityData: activityLog.data });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"text-center main-title\">Activity Logger</h1>\r\n        <Router>\r\n          <NavigationBar />\r\n          <Route exact path=\"/\">\r\n            {this.renderForm()}\r\n          </Route>\r\n          <Route path=\"/activitydisplay\">{this.renderTable()}</Route>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withCookies(App);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { CookiesProvider } from \"react-cookie\";\r\n\r\nReactDOM.render(\r\n  <CookiesProvider>\r\n    <App />\r\n  </CookiesProvider>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}