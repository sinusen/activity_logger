{"version":3,"sources":["components/Dropdown.js","helpers/time-functions.js","components/Form.js","helpers/list-handlers.js","App.js","index.js"],"names":["Dropdown","label","selected","options","onSelectedChange","generatedList","length","map","option","value","onChange","className","aria-label","getFormattedDate","date","Date","now","d","month","getMonth","day","getDate","year","getFullYear","join","getFormattedTime","minutes","getMinutes","hours","getHours","Form","props","areas","machines","operators","setDefaultStates","stateDefinition","state","maintenanceActivity","selectedDate","selectedTime","setState","updateMachines","area","currentArea","machinesList","filter","item","machine_location","id","machine_name","currentMachine","updateAreas","Set","forEach","value1","value2","set","push","getAreasFromList","handleAreaChange","event","stateProperty","target","handleChange","handleFormSubmission","dateValue","timeValue","onFormSubmit","epochMilliSeconds","getTime","machineId","Number","operatorId","currentOperator","activity","preventDefault","this","onFormMount","prevProps","operatorsList","name","console","log","postSuccessCount","onSubmit","htmlFor","type","placeholder","style","height","React","Component","App","fetchError","fetchOperationData","endPoint","a","axios","get","response","error","data","serverError","fetchDropdownData","areaAndMachines","postFormData","post","alert","message","renderForm","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.604d5824.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Dropdown = ({ label, selected, options, onSelectedChange }) => {\r\n  const generatedList =\r\n    options.length > 0\r\n      ? options.map((option) => {\r\n          return (\r\n            <option key={option.value} value={option.value}>\r\n              {option.label}\r\n            </option>\r\n          );\r\n        })\r\n      : null;\r\n\r\n  return (\r\n    <div>\r\n      <label>{label}</label>\r\n      <select\r\n        value={selected}\r\n        onChange={onSelectedChange}\r\n        className=\"form-select\"\r\n        aria-label=\"Default select example\"\r\n      >\r\n        {generatedList}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n","//Function to generate formatted date for input\r\nfunction getFormattedDate(date = Date.now()) {\r\n  const d = new Date(date);\r\n  let month = \"\" + (d.getMonth() + 1);\r\n  let day = \"\" + d.getDate();\r\n  let year = d.getFullYear();\r\n\r\n  if (month.length < 2) month = \"0\" + month;\r\n  if (day.length < 2) day = \"0\" + day;\r\n  return [year, month, day].join(\"-\");\r\n}\r\n//Function to generate formatted time for input\r\nfunction getFormattedTime(date = Date.now()) {\r\n  const d = new Date(date);\r\n  let minutes = \"\" + d.getMinutes();\r\n  let hours = \"\" + d.getHours();\r\n\r\n  if (minutes.length < 2) minutes = \"0\" + minutes;\r\n  if (hours.length < 2) hours = \"0\" + hours;\r\n  return [hours, minutes].join(\":\");\r\n}\r\n\r\n//Funtion to get epoch in milliseconds from date time\r\nfunction getEpoch(dateValue, timeValue) {\r\n  const dateTime = new Date(`${dateValue} ${timeValue}`);\r\n  return dateTime.getTime();\r\n}\r\n\r\nexport { getFormattedTime, getFormattedDate, getEpoch };\r\n","import React from \"react\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport {\r\n  getFormattedTime,\r\n  getFormattedDate,\r\n  getEpoch,\r\n} from \"../helpers/time-functions\";\r\nimport {\r\n  getAreasFromList,\r\n  getMachinesFromList,\r\n  getOperatorsFromList,\r\n} from \"../helpers/list-handlers\";\r\n\r\nclass Form extends React.Component {\r\n  areas = [];\r\n  machines = [];\r\n  operators = [];\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      maintenanceActivity: \"\",\r\n      currentArea: \"\",\r\n      currentMachine: \"\",\r\n      selectedDate: getFormattedDate(),\r\n      selectedTime: getFormattedTime(),\r\n      currentOperator: \"\",\r\n    };\r\n  }\r\n\r\n  setDefaultStates = () => {\r\n    const stateDefinition = {\r\n      ...this.state,\r\n      maintenanceActivity: \"\",\r\n      selectedDate: getFormattedDate(),\r\n      selectedTime: getFormattedTime(),\r\n    };\r\n    this.setState(stateDefinition);\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await this.props.onFormMount();\r\n  }\r\n  updateMachines = () => {\r\n    this.machines = getMachinesFromList(\r\n      this.state.currentArea,\r\n      this.props.machinesList\r\n    );\r\n    this.setState({ currentMachine: this.machines[0].value });\r\n  };\r\n\r\n  updateAreas = () => {\r\n    this.areas = getAreasFromList(this.props.machinesList);\r\n    this.setState({ currentArea: this.areas[0].value }, () => {\r\n      this.updateMachines();\r\n    });\r\n  };\r\n  componentDidUpdate(prevProps) {\r\n    if (\r\n      this.props.machinesList !== prevProps.machinesList &&\r\n      this.props.machinesList\r\n    ) {\r\n      this.updateAreas();\r\n    }\r\n    if (\r\n      this.props.operatorsList !== prevProps.operatorsList &&\r\n      this.props.operatorsList\r\n    ) {\r\n      this.operators = getOperatorsFromList(this.props.operatorsList);\r\n      this.setState({ currentOperator: this.operators[0].value });\r\n      console.log(this.operators);\r\n    }\r\n    if (this.props.postSuccessCount !== prevProps.postSuccessCount) {\r\n      this.setDefaultStates();\r\n    }\r\n  }\r\n\r\n  handleAreaChange = (event, stateProperty) => {\r\n    this.setState({ [stateProperty]: event.target.value }, () => {\r\n      this.updateMachines();\r\n    });\r\n  };\r\n  handleChange = (event, stateProperty) => {\r\n    this.setState({ [stateProperty]: event.target.value });\r\n  };\r\n\r\n  handleFormSubmission = (event) => {\r\n    this.props.onFormSubmit({\r\n      epochMilliSeconds: getEpoch(\r\n        this.state.selectedDate,\r\n        this.state.selectedTime\r\n      ),\r\n      machineId: Number(this.state.currentMachine),\r\n      operatorId: Number(this.state.currentOperator),\r\n      activity: this.state.maintenanceActivity,\r\n    });\r\n    event.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleFormSubmission}>\r\n        <div className=\"row g-5\">\r\n          <div className=\"col-md-6\">\r\n            <Dropdown\r\n              label=\"Select an area\"\r\n              selected={this.state.currentArea}\r\n              options={this.areas}\r\n              onSelectedChange={(event) => {\r\n                this.handleAreaChange(event, \"currentArea\");\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <Dropdown\r\n              label=\"Select a machine\"\r\n              selected={this.state.currentMachine}\r\n              options={this.machines}\r\n              onSelectedChange={(event) => {\r\n                this.handleChange(event, \"currentMachine\");\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <label htmlFor=\"datePicker\" className=\"form-label\">\r\n              Select the date\r\n            </label>\r\n            <input\r\n              className=\"form-control\"\r\n              id=\"datePicker\"\r\n              type=\"date\"\r\n              value={this.state.selectedDate}\r\n              onChange={(event) => {\r\n                this.handleChange(event, \"selectedDate\");\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <label htmlFor=\"timePicker\" className=\"form-label\">\r\n              Select the time\r\n            </label>\r\n            <input\r\n              className=\"form-control\"\r\n              id=\"timePicker\"\r\n              type=\"time\"\r\n              value={this.state.selectedTime}\r\n              onChange={(event) => {\r\n                this.handleChange(event, \"selectedTime\");\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12\">\r\n            <Dropdown\r\n              label=\"Please input the initials\"\r\n              selected={this.state.currentOperator}\r\n              options={this.operators}\r\n              onSelectedChange={(event) => {\r\n                this.handleChange(event, \"currentOperator\");\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <label htmlFor=\"maintenanceActivities\" className=\"form-label\">\r\n              Maintenance Activities\r\n            </label>\r\n            <textarea\r\n              id=\"maintenanceActivities\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter activity\"\r\n              style={{ height: \"200px\" }}\r\n              value={this.state.maintenanceActivity}\r\n              onChange={(event) => {\r\n                this.handleChange(event, \"maintenanceActivity\");\r\n              }}\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","const getAreasFromList = (machinesList) => {\r\n  let areas = [];\r\n  [...new Set(machinesList.map((item) => item.machine_location))].forEach(\r\n    (value1, value2, set) => {\r\n      areas.push({ label: value1, value: value1 });\r\n    }\r\n  );\r\n  return areas;\r\n};\r\n\r\nconst getMachinesFromList = (area, machinesList) => {\r\n  const machines = machinesList\r\n    .filter((item) => item.machine_location === area)\r\n    .map(({ id, machine_name }) => {\r\n      return { label: machine_name, value: id };\r\n    });\r\n  return machines;\r\n};\r\n\r\nconst getOperatorsFromList = (operatorsList) => {\r\n  const operators = operatorsList.map(({ id, name }) => {\r\n    return { label: name, value: id };\r\n  });\r\n  return operators;\r\n};\r\n\r\nexport { getAreasFromList, getMachinesFromList, getOperatorsFromList };\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Form from \"./components/Form\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    fetchError: false,\r\n    postSuccessCount: 0,\r\n    machinesList: null,\r\n    operatorsList: null,\r\n  };\r\n  fetchOperationData = async (endPoint) => {\r\n    try {\r\n      const response = await axios.get(`/activity-log/${endPoint}`);\r\n      return {\r\n        error: response.data.serverError,\r\n        data: response.data.data,\r\n      };\r\n    } catch (err) {\r\n      return { error: true };\r\n    }\r\n  };\r\n\r\n  fetchDropdownData = async () => {\r\n    const areaAndMachines = await this.fetchOperationData(\"area-and-machines\");\r\n    const operators = await this.fetchOperationData(\"operators\");\r\n\r\n    if (areaAndMachines.error || operators.error) {\r\n      this.setState({ fetchError: true });\r\n      return;\r\n    }\r\n    this.setState({ machinesList: areaAndMachines.data });\r\n    this.setState({ operatorsList: operators.data });\r\n  };\r\n\r\n  postFormData = async (data) => {\r\n    try {\r\n      const response = await axios.post(`/activity-log/submit-form-data`, data);\r\n      alert(response.data.message);\r\n      if (!response.data.error) {\r\n        this.setState({ postSuccessCount: this.state.postSuccessCount + 1 });\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      alert(\"Form submit error\");\r\n    }\r\n  };\r\n  renderForm() {\r\n    if (this.state.fetchError) {\r\n      return \"Error loading data\";\r\n    }\r\n    return (\r\n      <Form\r\n        onFormMount={this.fetchDropdownData}\r\n        machinesList={this.state.machinesList}\r\n        operatorsList={this.state.operatorsList}\r\n        onFormSubmit={this.postFormData}\r\n        postSuccessCount={this.state.postSuccessCount}\r\n      />\r\n    );\r\n  }\r\n  render() {\r\n    return <div className=\"container\">{this.renderForm()}</div>;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}