{"version":3,"sources":["components/Dropdown.js","helpers/time-functions.js","components/ActivityForm.js","helpers/list-handlers.js","components/EdittableLogItem.js","components/TableDisplay.js","components/ActivityDisplay.js","components/NavigationBar.js","App.js","index.js"],"names":["Dropdown","label","selected","options","onSelectedChange","labelClass","generatedList","length","map","option","value","Fragment","className","onChange","aria-label","getHyphenatedDate","date","Date","now","d","Number","month","getMonth","day","getDate","year","getFullYear","join","getSlashedDate","getFormattedTime","minutes","getMinutes","hours","getHours","getEpoch","dateValue","timeValue","getTime","addYearstoCurrentDate","years","expiryDate","setFullYear","Form","props","machineNames","machineGroups","machineLocations","operators","setDefaultStates","stateDefinition","state","maintenanceActivity","selectedDate","selectedTime","setState","updateMachines","location","group","selectedMachineLocation","selectedMachineGroup","machinesList","filter","item","machine_location","machine_group","id","machine_name","selectedMachine","updateMachineGroups","Set","forEach","value1","value2","set","push","getMachineGroupsFromList","updateMachineLocations","areas","getMachineLocationsFromList","handleAreaChange","event","stateProperty","target","handleGroupChange","handleChange","handleFormSubmission","preventDefault","onFormSubmit","epochMilliSeconds","machineId","operatorId","selectedOperator","activity","this","onFormMount","prevProps","operatorsList","name","loggedOperator","postSuccessCount","onSubmit","htmlFor","type","placeholder","style","height","required","React","Component","EdittableLogItem","pk","epoch_ms","machine","operatorInitials","machines","editDataHandler","cancelEditHandler","useState","setDate","time","setTime","setSelectedMachine","editedActivity","setEditedActivity","useEffect","onClick","find","operator","initials","replaceAll","edittedObject","alert","bind","colSpan","TableDisplay","activityData","editButtonHandler","deleteDataHandler","scope","row","index","editContent","ActivityDisplay","editableActivityData","setEditableActivityData","entry","NavigationBar","to","App","fetchOperationData","endPoint","a","axios","get","response","error","data","serverError","fetchDropdownData","machinesData","formDataError","postFormData","post","cookies","expires","message","fetchActivityLog","console","log","editData","deleteData","tableDataError","activityLog","exact","path","renderForm","renderTable","withCookies","ReactDOM","render","CookiesProvider","document","querySelector"],"mappings":"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","file":"static/js/main.cc77ded1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Dropdown = ({\r\n  label,\r\n  selected,\r\n  options,\r\n  onSelectedChange,\r\n  labelClass = \"\",\r\n}) => {\r\n  const generatedList =\r\n    options.length > 0\r\n      ? options.map((option) => {\r\n          return (\r\n            <option key={option.value} value={option.value}>\r\n              {option.label}\r\n            </option>\r\n          );\r\n        })\r\n      : null;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <label className={labelClass}>{label}</label>\r\n      <select\r\n        value={selected}\r\n        onChange={onSelectedChange}\r\n        className=\"form-select\"\r\n        aria-label=\"Default select example\"\r\n      >\r\n        {generatedList}\r\n      </select>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n","//Function to generate hyphen formatted date\r\nfunction getHyphenatedDate(date = Date.now()) {\r\n  const d = new Date(Number(date));\r\n  let month = \"\" + (d.getMonth() + 1);\r\n  let day = \"\" + d.getDate();\r\n  let year = d.getFullYear();\r\n\r\n  if (month.length < 2) month = \"0\" + month;\r\n  if (day.length < 2) day = \"0\" + day;\r\n  return [year, month, day].join(\"-\");\r\n}\r\n\r\n//Function to generate slash formatted date\r\nfunction getSlashedDate(date = Date.now()) {\r\n  const d = new Date(Number(date));\r\n  let month = \"\" + (d.getMonth() + 1);\r\n  let day = \"\" + d.getDate();\r\n  let year = d.getFullYear();\r\n\r\n  if (month.length < 2) month = \"0\" + month;\r\n  if (day.length < 2) day = \"0\" + day;\r\n  return [day, month, year].join(\"/\");\r\n}\r\n//Function to generate formatted time\r\nfunction getFormattedTime(date = Date.now()) {\r\n  const d = new Date(Number(date));\r\n  let minutes = \"\" + d.getMinutes();\r\n  let hours = \"\" + d.getHours();\r\n\r\n  if (minutes.length < 2) minutes = \"0\" + minutes;\r\n  if (hours.length < 2) hours = \"0\" + hours;\r\n  return [hours, minutes].join(\":\");\r\n}\r\n\r\n//Funtion to get epoch in milliseconds from date time\r\nfunction getEpoch(dateValue, timeValue) {\r\n  const dateTime = new Date(`${dateValue} ${timeValue}`);\r\n  return dateTime.getTime();\r\n}\r\n\r\nfunction addYearstoCurrentDate(years = 0) {\r\n  let expiryDate = new Date();\r\n  expiryDate.setFullYear(expiryDate.getFullYear() + years);\r\n  return new Date(expiryDate);\r\n}\r\n\r\nexport {\r\n  getFormattedTime,\r\n  getHyphenatedDate,\r\n  getEpoch,\r\n  getSlashedDate,\r\n  addYearstoCurrentDate,\r\n};\r\n","import \"./ActivityForm.css\";\r\n\r\nimport React from \"react\";\r\n\r\nimport Dropdown from \"./Dropdown\";\r\nimport {\r\n  getFormattedTime,\r\n  getHyphenatedDate,\r\n  getEpoch,\r\n} from \"../helpers/time-functions\";\r\nimport {\r\n  getMachineLocationsFromList,\r\n  getMachineGroupsFromList,\r\n  getMachinesFromList,\r\n  getOperatorsFromList,\r\n} from \"../helpers/list-handlers\";\r\n\r\nclass Form extends React.Component {\r\n  machineNames = [];\r\n  machineGroups = [];\r\n  machineLocations = [];\r\n  operators = [];\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      maintenanceActivity: \"\",\r\n      selectedMachine: \"\",\r\n      selectedMachineGroup: \"\",\r\n      selectedMachineLocation: \"\",\r\n      selectedDate: getHyphenatedDate(),\r\n      selectedTime: getFormattedTime(),\r\n      selectedOperator: \"\",\r\n    };\r\n  }\r\n\r\n  setDefaultStates = () => {\r\n    const stateDefinition = {\r\n      ...this.state,\r\n      maintenanceActivity: \"\",\r\n      selectedDate: getHyphenatedDate(),\r\n      selectedTime: getFormattedTime(),\r\n    };\r\n    this.setState(stateDefinition);\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await this.props.onFormMount();\r\n  }\r\n  updateMachines = () => {\r\n    this.machineNames = getMachinesFromList(\r\n      this.state.selectedMachineLocation,\r\n      this.state.selectedMachineGroup,\r\n      this.props.machinesList\r\n    );\r\n    this.setState({ selectedMachine: this.machineNames[0].value });\r\n  };\r\n\r\n  updateMachineGroups = () => {\r\n    this.machineGroups = getMachineGroupsFromList(\r\n      this.state.selectedMachineLocation,\r\n      this.props.machinesList\r\n    );\r\n    this.setState({ selectedMachineGroup: this.machineGroups[0].value }, () => {\r\n      this.updateMachines();\r\n    });\r\n  };\r\n\r\n  updateMachineLocations = () => {\r\n    this.machineLocations = getMachineLocationsFromList(\r\n      this.props.machinesList\r\n    );\r\n    this.setState(\r\n      { selectedMachineLocation: this.machineLocations[0].value },\r\n      () => {\r\n        this.updateMachineGroups();\r\n      }\r\n    );\r\n  };\r\n  componentDidUpdate(prevProps) {\r\n    if (\r\n      this.props.machinesList !== prevProps.machinesList &&\r\n      this.props.machinesList.length > 0\r\n    ) {\r\n      this.updateMachineLocations();\r\n    }\r\n    if (\r\n      this.props.operatorsList !== prevProps.operatorsList &&\r\n      this.props.operatorsList\r\n    ) {\r\n      this.operators = getOperatorsFromList(this.props.operatorsList);\r\n      this.setState({\r\n        selectedOperator: this.props.loggedOperator || this.operators[0].value,\r\n      });\r\n    }\r\n    if (this.props.postSuccessCount !== prevProps.postSuccessCount) {\r\n      this.setDefaultStates();\r\n    }\r\n  }\r\n\r\n  handleAreaChange = (event, stateProperty) => {\r\n    this.setState({ [stateProperty]: event.target.value }, () => {\r\n      this.updateMachineGroups();\r\n    });\r\n  };\r\n  handleGroupChange = (event, stateProperty) => {\r\n    this.setState({ [stateProperty]: event.target.value }, () => {\r\n      this.updateMachines();\r\n    });\r\n  };\r\n  handleChange = (event, stateProperty) => {\r\n    this.setState({ [stateProperty]: event.target.value });\r\n  };\r\n\r\n  handleFormSubmission = (event) => {\r\n    event.preventDefault();\r\n    this.props.onFormSubmit({\r\n      epochMilliSeconds: getEpoch(\r\n        this.state.selectedDate,\r\n        this.state.selectedTime\r\n      ),\r\n      machineId: Number(this.state.selectedMachine),\r\n      operatorId: Number(this.state.selectedOperator),\r\n      activity: this.state.maintenanceActivity,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleFormSubmission}>\r\n        <div className=\"row g-4\">\r\n          <div className=\"col-md-4\">\r\n            <div className=\"input-group\">\r\n              <Dropdown\r\n                label=\"Area\"\r\n                labelClass=\"input-group-text fw-bold\"\r\n                selected={this.state.selectedMachineLocation}\r\n                options={this.machineLocations}\r\n                onSelectedChange={(event) => {\r\n                  this.handleAreaChange(event, \"selectedMachineLocation\");\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <div className=\"input-group\">\r\n              <Dropdown\r\n                label=\"Group\"\r\n                labelClass=\"input-group-text fw-bold\"\r\n                selected={this.state.selectedMachineGroup}\r\n                options={this.machineGroups}\r\n                onSelectedChange={(event) => {\r\n                  this.handleGroupChange(event, \"selectedMachineGroup\");\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <div className=\"input-group\">\r\n              <Dropdown\r\n                label=\"Machine\"\r\n                labelClass=\"input-group-text fw-bold\"\r\n                selected={this.state.selectedMachine}\r\n                options={this.machineNames}\r\n                onSelectedChange={(event) => {\r\n                  this.handleChange(event, \"selectedMachine\");\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <div className=\"input-group\">\r\n              <label htmlFor=\"datePicker\" className=\"input-group-text fw-bold\">\r\n                Date\r\n              </label>\r\n              <input\r\n                className=\"form-control\"\r\n                id=\"datePicker\"\r\n                type=\"date\"\r\n                value={this.state.selectedDate}\r\n                onChange={(event) => {\r\n                  this.handleChange(event, \"selectedDate\");\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <div className=\"input-group\">\r\n              <label htmlFor=\"timePicker\" className=\"input-group-text fw-bold\">\r\n                Time\r\n              </label>\r\n              <input\r\n                className=\"form-control\"\r\n                id=\"timePicker\"\r\n                type=\"time\"\r\n                value={this.state.selectedTime}\r\n                onChange={(event) => {\r\n                  this.handleChange(event, \"selectedTime\");\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-12\">\r\n            <div className=\"input-group\">\r\n              <Dropdown\r\n                label=\"Operator/Technician\"\r\n                labelClass=\"input-group-text fw-bold\"\r\n                selected={this.state.selectedOperator}\r\n                options={this.operators}\r\n                onSelectedChange={(event) => {\r\n                  this.handleChange(event, \"selectedOperator\");\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <label\r\n              htmlFor=\"maintenanceActivities\"\r\n              className=\"form-label fw-bold\"\r\n            >\r\n              Maintenance Activities\r\n            </label>\r\n            <textarea\r\n              id=\"maintenanceActivities\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter activity\"\r\n              style={{ height: \"200px\" }}\r\n              value={this.state.maintenanceActivity}\r\n              onChange={(event) => {\r\n                this.handleChange(event, \"maintenanceActivity\");\r\n              }}\r\n              required\r\n            />\r\n          </div>\r\n          <button\r\n            type=\"submit\"\r\n            id=\"activity-submit\"\r\n            className=\"btn btn-primary\"\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","const getMachineLocationsFromList = (machinesList) => {\r\n  let areas = [];\r\n  [...new Set(machinesList.map((item) => item.machine_location))].forEach(\r\n    (value1, value2, set) => {\r\n      areas.push({ label: value1, value: value1 });\r\n    }\r\n  );\r\n  return areas;\r\n};\r\n\r\nconst getMachineGroupsFromList = (location, machinesList) => {\r\n  const machineGroups = [];\r\n  [\r\n    ...new Set(\r\n      machinesList\r\n        .filter((item) => item.machine_location === location)\r\n        .map((item) => item.machine_group)\r\n    ),\r\n  ].forEach((value1, value2, set) => {\r\n    machineGroups.push({ label: value1, value: value1 });\r\n  });\r\n  return machineGroups;\r\n};\r\n\r\nconst getMachinesFromList = (location, group, machinesList) => {\r\n  const machines = machinesList\r\n    .filter(\r\n      (item) =>\r\n        item.machine_location === location && item.machine_group === group\r\n    )\r\n    .map(({ id, machine_name }) => {\r\n      return { label: machine_name, value: id };\r\n    });\r\n  return machines;\r\n};\r\n\r\nconst getOperatorsFromList = (operatorsList) => {\r\n  const operators = operatorsList.map(({ id, name }) => {\r\n    return { label: name, value: id };\r\n  });\r\n  return operators;\r\n};\r\n\r\nexport {\r\n  getMachineLocationsFromList,\r\n  getMachineGroupsFromList,\r\n  getMachinesFromList,\r\n  getOperatorsFromList,\r\n};\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport {\r\n  getEpoch,\r\n  getFormattedTime,\r\n  getHyphenatedDate,\r\n} from \"../helpers/time-functions\";\r\n\r\nconst EdittableLogItem = ({\r\n  pk,\r\n  epoch_ms,\r\n  machine,\r\n  operatorInitials,\r\n  activity,\r\n  machines,\r\n  operators,\r\n  editDataHandler,\r\n  cancelEditHandler,\r\n}) => {\r\n  const [date, setDate] = useState(getHyphenatedDate(Date.now()));\r\n  const [time, setTime] = useState(getFormattedTime(Date.now()));\r\n  const [selectedMachine, setSelectedMachine] = useState(machine);\r\n  const [editedActivity, setEditedActivity] = useState(activity);\r\n  useEffect(() => {\r\n    setTime(getFormattedTime(epoch_ms));\r\n    setDate(getHyphenatedDate(epoch_ms));\r\n  }, [epoch_ms]);\r\n  const machinesList = () => {\r\n    return machines.length > 0\r\n      ? machines.map((machine) => {\r\n          return (\r\n            <option key={machine.id} value={machine.machine_name}>\r\n              {machine.machine_name}\r\n            </option>\r\n          );\r\n        })\r\n      : null;\r\n  };\r\n  const onSubmitClick = (event) => {\r\n    event.preventDefault();\r\n    const { id: machineId } = machines.find(\r\n      (machine) => machine.machine_name === selectedMachine\r\n    );\r\n    const { id: operatorId } = operators.find(\r\n      (operator) => operator.initials === operatorInitials\r\n    );\r\n    if (editedActivity.replaceAll(\" \", \"\") == \"\") {\r\n      alert(\"The log cannot be empty\");\r\n      return;\r\n    }\r\n    const edittedObject = {\r\n      pk: pk,\r\n      epochMilliSeconds: getEpoch(date, time),\r\n      machineId,\r\n      activity: editedActivity,\r\n      operatorId,\r\n    };\r\n    editDataHandler(edittedObject);\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <tr>\r\n        <td>\r\n          <input\r\n            className=\"form-control\"\r\n            id=\"datePicker\"\r\n            type=\"date\"\r\n            value={date}\r\n            onChange={(event) => setDate(event.target.value)}\r\n          />\r\n        </td>\r\n        {/* <td>{getFormattedTime(Number(epoch_ms))}</td> */}\r\n        <td>\r\n          <input\r\n            className=\"form-control\"\r\n            id=\"timePicker\"\r\n            type=\"time\"\r\n            value={time}\r\n            onChange={(event) => {\r\n              setTime(event.target.value);\r\n            }}\r\n          />\r\n        </td>\r\n        <td>\r\n          <select\r\n            value={selectedMachine}\r\n            onChange={(event) => setSelectedMachine(event.target.value)}\r\n            className=\"form-select\"\r\n            aria-label=\"Default select example\"\r\n          >\r\n            {machinesList()}\r\n          </select>\r\n        </td>\r\n        <td>{operatorInitials}</td>\r\n        <td>\r\n          <button\r\n            className=\"btn btn-sm btn-primary edit-button-group\"\r\n            onClick={onSubmitClick}\r\n          >\r\n            Submit\r\n          </button>\r\n          <button\r\n            className=\"btn btn-sm btn-secondary\"\r\n            onClick={cancelEditHandler.bind(null, pk)}\r\n          >\r\n            Cancel\r\n          </button>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td colSpan=\"5\">\r\n          <textarea\r\n            // id=\"maintenanceActivities\"\r\n            className=\"form-control\"\r\n            placeholder={editedActivity}\r\n            //   style={{ height: \"200px\" }}\r\n            value={editedActivity}\r\n            onChange={(event) => setEditedActivity(event.target.value)}\r\n          />\r\n        </td>\r\n      </tr>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default EdittableLogItem;\r\n","import React from \"react\";\r\nimport { getSlashedDate, getFormattedTime } from \"../helpers/time-functions\";\r\nimport EdittableLogItem from \"./EdittableLogItem\";\r\n\r\nimport \"./TableDisplay.css\";\r\n\r\nconst TableDisplay = ({\r\n  activityData,\r\n  editButtonHandler,\r\n  deleteDataHandler,\r\n  cancelEditHandler,\r\n  editDataHandler,\r\n  machines,\r\n  operators,\r\n}) => {\r\n  const renderTableRows = () => {\r\n    if (activityData.length <= 0) {\r\n      return null;\r\n    }\r\n    return activityData.map((row, index) => {\r\n      return (\r\n        <React.Fragment key={row.pk}>\r\n          {row.editContent ? (\r\n            <EdittableLogItem\r\n              pk={row.pk}\r\n              epoch_ms={row.epoch_ms}\r\n              machine={row.machine_name}\r\n              operatorInitials={row.initials}\r\n              activity={row.activity}\r\n              machines={machines}\r\n              editDataHandler={editDataHandler}\r\n              cancelEditHandler={cancelEditHandler}\r\n              operators={operators}\r\n            />\r\n          ) : (\r\n            <React.Fragment>\r\n              <tr>\r\n                <td>{getSlashedDate(Number(row.epoch_ms))}</td>\r\n                <td>{getFormattedTime(Number(row.epoch_ms))}</td>\r\n                <td>{row.machine_name}</td>\r\n                <td>{row.initials}</td>\r\n                <td>\r\n                  <button\r\n                    onClick={editButtonHandler.bind(null, row.pk)}\r\n                    className=\"edit-button-group btn btn-sm btn-warning\"\r\n                  >\r\n                    Edit log\r\n                  </button>\r\n                  <button\r\n                    className=\"btn btn-sm btn-danger\"\r\n                    onClick={deleteDataHandler.bind(null, { pk: row.pk })}\r\n                  >\r\n                    Delete log\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td colSpan=\"5\">{row.activity}</td>\r\n              </tr>\r\n            </React.Fragment>\r\n          )}\r\n        </React.Fragment>\r\n      );\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Date</th>\r\n            <th scope=\"col\">Time</th>\r\n            <th scope=\"col\">Machine</th>\r\n            <th scope=\"col\">Operator</th>\r\n            <th scope=\"col\">Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{renderTableRows()}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TableDisplay;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TableDisplay from \"./TableDisplay\";\r\n\r\nconst ActivityDisplay = ({\r\n  activityData,\r\n  machines,\r\n  operators,\r\n  editDataHandler,\r\n  deleteDataHandler,\r\n}) => {\r\n  const [editableActivityData, setEditableActivityData] = useState([]);\r\n  useEffect(() => {\r\n    if (activityData && activityData.length > 0) {\r\n      setEditableActivityData(\r\n        activityData.map((entry) => {\r\n          entry.editContent = false;\r\n          return entry;\r\n        })\r\n      );\r\n    }\r\n  }, [activityData]);\r\n\r\n  function editButtonHandler(id) {\r\n    setEditableActivityData(\r\n      editableActivityData.map((entry) => {\r\n        entry.editContent = entry.pk === id ? true : false;\r\n        return entry;\r\n      })\r\n    );\r\n  }\r\n\r\n  function cancelEditHandler(id) {\r\n    setEditableActivityData(\r\n      editableActivityData.map((entry) => {\r\n        entry.editContent = entry.pk === id ? false : entry.editContent;\r\n        return entry;\r\n      })\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      <TableDisplay\r\n        activityData={editableActivityData}\r\n        editButtonHandler={editButtonHandler}\r\n        deleteDataHandler={deleteDataHandler}\r\n        editDataHandler={editDataHandler}\r\n        machines={machines}\r\n        operators={operators}\r\n        cancelEditHandler={cancelEditHandler}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActivityDisplay;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst NavigationBar = () => {\r\n  return (\r\n    <div>\r\n      <ul className=\"nav nav-tabs\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/\">\r\n            Submit activity\r\n          </Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/activitydisplay\">\r\n            Display activity\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport { instanceOf } from \"prop-types\";\r\nimport { withCookies, Cookies } from \"react-cookie\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nimport ActivityForm from \"./components/ActivityForm\";\r\nimport ActivityDisplay from \"./components/ActivityDisplay\";\r\nimport NavigationBar from \"./components/NavigationBar\";\r\n\r\nimport { addYearstoCurrentDate } from \"./helpers/time-functions\";\r\n\r\nclass App extends React.Component {\r\n  static propTypes = {\r\n    cookies: instanceOf(Cookies).isRequired,\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    const { cookies } = props;\r\n    this.state = {\r\n      name: (cookies && cookies.get(\"name\")) || \"Ben\",\r\n      formDataError: false,\r\n      tableDataError: false,\r\n      activityData: [],\r\n      postSuccessCount: 0,\r\n      machinesList: [],\r\n      operatorsList: null,\r\n    };\r\n  }\r\n\r\n  fetchOperationData = async (endPoint) => {\r\n    try {\r\n      const response = await axios.get(`/activity-log/${endPoint}`);\r\n      return {\r\n        error: response.data.serverError,\r\n        data: response.data.data,\r\n      };\r\n    } catch (err) {\r\n      return { error: true };\r\n    }\r\n  };\r\n\r\n  fetchDropdownData = async () => {\r\n    const machinesData = await this.fetchOperationData(\"machines_groups_areas\");\r\n    const operators = await this.fetchOperationData(\"operators\");\r\n\r\n    if (machinesData.error || operators.error) {\r\n      this.setState({ formDataError: true });\r\n      return;\r\n    }\r\n    this.setState({ machinesList: machinesData.data });\r\n    this.setState({ operatorsList: operators.data });\r\n  };\r\n\r\n  postFormData = async (data) => {\r\n    try {\r\n      const response = await axios.post(`/activity-log/submit-form-data`, data);\r\n\r\n      const { cookies } = this.props;\r\n      cookies.set(\"logger\", data.operatorId, {\r\n        expires: addYearstoCurrentDate(1),\r\n      });\r\n\r\n      alert(response.data.message);\r\n      if (!response.data.error) {\r\n        this.setState({ postSuccessCount: this.state.postSuccessCount + 1 });\r\n        await this.fetchActivityLog();\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      alert(\"Form submit error\");\r\n    }\r\n  };\r\n\r\n  editData = async (data) => {\r\n    console.log(data);\r\n    try {\r\n      const response = await axios.post(`/activity-log/edit-data`, data);\r\n\r\n      alert(response.data.message);\r\n      if (!response.data.error) {\r\n        await this.fetchActivityLog();\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      alert(\"Data could not be edited. Please report the issue\");\r\n    }\r\n  };\r\n  deleteData = async (data) => {\r\n    try {\r\n      const response = await axios.post(`/activity-log/delete-data`, data);\r\n\r\n      alert(response.data.message);\r\n      if (!response.data.error) {\r\n        await this.fetchActivityLog();\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      alert(\"Data could not be deleted. Please report the issue\");\r\n    }\r\n  };\r\n  renderForm() {\r\n    if (this.state.formDataError) {\r\n      return \"Error loading data\";\r\n    }\r\n    return (\r\n      <div className=\"mt-3\">\r\n        <ActivityForm\r\n          onFormMount={this.fetchDropdownData}\r\n          machinesList={this.state.machinesList}\r\n          operatorsList={this.state.operatorsList}\r\n          onFormSubmit={this.postFormData}\r\n          postSuccessCount={this.state.postSuccessCount}\r\n          loggedOperator={this.props.cookies.get(\"logger\") || null}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  renderTable() {\r\n    if (this.state.tableDataError) {\r\n      return \"Error loading data\";\r\n    }\r\n    return (\r\n      <div className=\"mt-3\">\r\n        <ActivityDisplay\r\n          activityData={this.state.activityData}\r\n          machines={this.state.machinesList}\r\n          operators={this.state.operatorsList}\r\n          editDataHandler={this.editData}\r\n          deleteDataHandler={this.deleteData}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  async fetchActivityLog() {\r\n    const activityLog = await this.fetchOperationData(\"activity-logs\");\r\n    if (activityLog.error) {\r\n      this.setState({ tableDataError: activityLog.error });\r\n      return;\r\n    }\r\n    this.setState({ activityData: activityLog.data });\r\n  }\r\n  async componentDidMount() {\r\n    await this.fetchActivityLog();\r\n    await this.fetchDropdownData();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"text-center main-title\">Activity Logger</h1>\r\n        <Router>\r\n          <NavigationBar />\r\n          <Route exact path=\"/\">\r\n            {this.renderForm()}\r\n          </Route>\r\n          <Route path=\"/activitydisplay\">{this.renderTable()}</Route>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withCookies(App);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { CookiesProvider } from \"react-cookie\";\r\n\r\nReactDOM.render(\r\n  <CookiesProvider>\r\n    <App />\r\n  </CookiesProvider>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}